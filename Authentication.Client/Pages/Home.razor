@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>داشبورد</PageTitle>

@if (!OperatingSystem.IsBrowser())
{
    <LoadingWithImage />
}
else
{
    <AuthorizeView Roles="Administrator">
        <Authorizing>
            <LoadingWithImage Content="در حال تایید هویت شما..." />
        </Authorizing>
        <NotAuthorized>
            <NoPermission />
        </NotAuthorized>
        <Authorized>
            @* <p>You are logged in as @context.User.Identity!.Name</p> *@
            <h2 class="text-2xl text-slate-900 text-center">داشبورد</h2>
            <CustomToast />
            <div class="container mx-auto p-4">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <button @onclick="TreasureModalHandler" class="dash-card relative group rounded-xl p-6">
                        <div class="flex items-center gap-4">
                            <div class="icon-container bg-gradient-to-tr from-blue-500 to-blue-400 text-white rounded-lg flex items-center justify-center">
                                <i class="bi bi-bank2 text-2xl"></i>
                            </div>

                            <div class="flex-1 text-right">
                                <p class="text-2xl mb-1">صندوق</p>

                            </div>
                        </div>
                        <div class="wave-overlay"></div>
                    </button>

                    <button @onclick="AccountModalHandler" class="dash-card relative group rounded-xl p-6">
                        <div class="flex items-center gap-4">
                            <div class="icon-container bg-gradient-to-tr from-green-500 to-green-400 text-white rounded-lg flex items-center justify-center">
                                <i class="bi bi-cash text-2xl"></i>
                            </div>
                            <div class="flex-1 text-right">
                                <p class="text-2xl mb-1">حسابات</p>
                                @*  <h3 class="text-gradient text-3xl font-bold">2,845</h3>
                            <div class="text-red-500 text-sm mt-2">
                                <i class="bi bi-arrow-down-short"></i> 3.2% from last week
                            </div> *@
                            </div>
                        </div>
                        <div class="wave-overlay"></div>
                    </button>

                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">

                    <!-- Customer Card -->
                    <div class="dash-card relative group rounded-xl p-6">
                        <div class="flex items-center gap-4">
                            <!-- Icon -->
                            <div class="icon-container bg-gradient-to-tr from-blue-500 to-blue-400 text-white rounded-lg flex items-center justify-center">
                                <i class="bi bi-people-fill text-2xl"></i>
                            </div>

                            <!-- Content -->
                            <div class="flex-1 text-right">
                                <p class="text-lg mb-1">تعداد مشتریان</p>
                                <h3 class="text-gradient text-3xl font-bold">@_customersTotal</h3>
                                <div class="text-green-500 text-sm mt-2">
                                    <i class="bi bi-arrow-up-short"></i> 12.5% from last month
                                </div>
                            </div>
                        </div>
                        <!-- Wave Effect -->
                        <div class="wave-overlay"></div>
                    </div>

                    <!-- Transaction Card -->
                    <div class="dash-card relative group rounded-xl p-6">
                        <div class="flex items-center gap-4">
                            <div class="icon-container bg-gradient-to-tr from-amber-500 to-amber-400 text-white rounded-lg flex items-center justify-center">
                                <i class="bi bi-cash-coin text-2xl"></i>
                            </div>
                            <div class="flex-1 text-right">
                                <p class="text-lg mb-1">تعداد تراکنش ها</p>
                                <h3 class="text-gradient text-3xl font-bold">@_transactionsTotal</h3>
                                <div class="text-red-500 text-sm mt-2">
                                    <i class="bi bi-arrow-down-short"></i> 3.2% from last week
                                </div>
                            </div>
                        </div>
                        <div class="wave-overlay"></div>
                    </div>

                    <!-- Balance Card -->
                    <div class="dash-card relative group rounded-xl p-6">
                        <div class="flex items-center gap-4">
                            <div class="icon-container bg-gradient-to-tr from-green-500 to-green-400 text-white rounded-lg flex items-center justify-center">
                                <i class="bi bi-bank2 text-2xl"></i>
                            </div>
                            <div class="flex-1 text-right">
                                <p class="text-lg mb-1">بیلانس</p>
                                <h3 class="text-gradient text-3xl font-bold">$124k</h3>
                                <div class="text-green-500 text-sm mt-2">
                                    <i class="bi bi-arrow-up-short"></i> 8.1% annual growth
                                </div>
                            </div>
                        </div>
                        <div class="wave-overlay"></div>
                    </div>

                </div>
            </div>
            @if (_accountModalOpen)
            {
                <OfficeAccountsModal isModalOpen="@_accountModalOpen" OnClose="AccountModalHandler" />
            }
            @if (_treasureModalOpen)
            {
                <TreasureyModal isModalOpen="@_treasureModalOpen" OnClose="TreasureModalHandler" />
            }

        </Authorized>

    </AuthorizeView>
}


@code {
    #region Private Fields

    bool isAuthenticated { get; set; }

    private bool _accountModalOpen { get; set; } = false;

    private bool _treasureModalOpen { get; set; } = false;
    private bool isLoading = true; // Initial state is loading
    #endregion

    #region Private Methods

    private void AccountModalHandler()
    {
        _accountModalOpen = !_accountModalOpen;
    }

    private void TreasureModalHandler()
    {
        _treasureModalOpen = !_treasureModalOpen;
    }

    #endregion


    #region Life Cycles

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private int _customersTotal { get; set; }

    private int _transactionsTotal { get; set; }

    private bool _loadingData { get; set; }

    private async Task FetchCustomersTotal()
    {
        try
        {
            _loadingData = true;

            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
            AuthenticationHeaderValue("Bearer", _jwtToken);

            // Fetch All currencies
            string url = $"api/CustomerAccount/totalCustomer";

            var response = await _httpClient.GetFromJsonAsync<ApiResponse<int>>(url);
            if (response == null || !response.Success)
            {
                toastService.ShowError(response.Message);
                return;
            }

            _customersTotal = response.Data;

            await FetchTransactionsTotal();
        }
        catch (Exception ex)
        {
            toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.ServerError)]);
        }
        finally
        {
            _loadingData = false;
        }
    }

    private async Task FetchTransactionsTotal()
    {
        try
        {
            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.
            AuthenticationHeaderValue("Bearer", _jwtToken);

            // Fetch All currencies
            string url = $"api/CustomerTransaction/transactionsTotal";

            var response = await _httpClient.GetFromJsonAsync<ApiResponse<int>>(url);
            if (response == null || !response.Success)
            {
                toastService.ShowError(response.Message);
                return;
            }

            _transactionsTotal = response.Data;
        }
        catch (Exception ex)
        {
            toastService.ShowError(Helper.ErrorsDictionary[nameof(ErrorList.ServerError)]);
        }
    }

    private string _jwtToken { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState; // Wait for authentication to complete

        isAuthenticated = authState.User.Identity is not null && authState.User.Identity.IsAuthenticated;
        if (!isAuthenticated)
        {
            isLoading = false; // Authentication has completed
            StateHasChanged(); // Force UI update
            return;
        }
        isLoading = false;
        _jwtToken = authState.ExtractJWTFromToken();
        await FetchCustomersTotal();
    }

    #endregion



}